name: AWS CI/CD Pipeline

on:
  push:
    branches: [main, ci-cd]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker images
        run: |
          # Build the app service with --no-cache to ensure fresh build
          docker compose build --progress=plain --no-cache app

          # Get the image ID from the built image
          IMAGE_ID=$(docker images -q laravel-book-shelf-app:latest)
          echo "Built image ID: $IMAGE_ID"

          # Tag with both latest and commit hash
          docker tag $IMAGE_ID ${{ secrets.AWS_ECR_REPO_URI }}:latest
          docker tag $IMAGE_ID ${{ secrets.AWS_ECR_REPO_URI }}:${{ github.sha }}
          echo "Tagged images with latest and ${{ github.sha }}"

      - name: Push to Amazon ECR
        run: |
          # Push both tags to ECR
          docker push ${{ secrets.AWS_ECR_REPO_URI }}:latest
          docker push ${{ secrets.AWS_ECR_REPO_URI }}:${{ github.sha }}
          echo "Pushed images to ECR: ${{ secrets.AWS_ECR_REPO_URI }}:latest and ${{ secrets.AWS_ECR_REPO_URI }}:${{ github.sha }}"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Login to ECR
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REPO_URI }}
            
            # Pull the latest image
            docker pull ${{ secrets.AWS_ECR_REPO_URI }}:${{ github.sha }}
            
            # Stop and remove any existing container
            docker stop laravel-app || true
            docker rm laravel-app || true
            
            # Run the new container
            docker run -d \
              --name laravel-app \
              -p 80:80 \
              -e APP_ENV=production \
              -e APP_DEBUG=false \
              ${{ secrets.AWS_ECR_REPO_URI }}:${{ github.sha }}
            
            # Clean up old images
            docker system prune -af
